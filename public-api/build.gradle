apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'

buildscript {
	ext {
		springBootVersion = '1.3.5.RELEASE'
		apacheCommonsLang3Version = '3.4'
		apacheCommonsCollections4Version = '4.1'
		elasticsaerchVersion = '2.3.0'
		slf4jVersion = '1.6.1'
		assertjVersion = '3.3.0'
		contextSupportVersion = '4.3.0.RELEASE'
		javaMailVersion = '1.4.7'
		googleAPIMailVersion = 'v1-rev44-1.22.0'
		jwtVersion = '3.1.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
} 

// war 
jar {
	baseName = 'iteam-public-api'
	version = '0.0.1'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile("org.apache.commons:commons-lang3:${apacheCommonsLang3Version}")
	compile("org.apache.commons:commons-collections4:${apacheCommonsCollections4Version}")
	// compile("org.springframework:spring-context-support:${contextSupportVersion}")
	compile("com.google.apis:google-api-services-gmail:${googleAPIMailVersion}"){
		exclude module: "guava-jdk5"
	}
	
	compile ("com.auth0:java-jwt:${jwtVersion}")
	
	
	compile("javax.mail:mail:${javaMailVersion}")
	compile("org.springframework.boot:spring-boot-starter-security"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}
	compile("org.springframework.boot:spring-boot-starter-thymeleaf"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}	
	compile("org.elasticsearch:elasticsearch:${elasticsaerchVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}
	compile("org.springframework.boot:spring-boot-starter-websocket"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}
   	compile("org.springframework:spring-messaging"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}
	
	compile("org.slf4j:slf4j-simple:${slf4jVersion}")
	
	
	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}"){
		exclude module: "logback-classic"
		exclude module: "logbak-core"
		exclude module: "log4j-over-slf4j"
	}
	
	testCompile("org.assertj:assertj-core:${assertjVersion}")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.13'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }    
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
            	dir: it,
            	
            	excludes: [
            		'org/iteam/configuration/**/*',
            		'org/iteam/controllers/Advisor/**',
            		'org/iteam/data/dal/client/**',
            		'org/iteam/data/model/**',
            		'org/iteam/exceptions/**'])
        })
    }
}
